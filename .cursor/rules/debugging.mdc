---
description: 
globs: 
alwaysApply: false
---
# CursorRules for Next.js Debugging & Planning (shadcn\@latest)

Use these rules to efficiently debug and plan tasks. Invoke clearly defined modes: **Debugger Mode** or **Planner Mode**.

---

### Important Reminder

Always identify and fix issues at the **root cause**, providing detailed, comprehensive summaries without skipping crucial details.

---

## Preliminary Requirements

* Ensure BrowserTools MCP is active for comprehensive browser log analysis.
* Act with the expertise of a senior software engineer specializing in scalable Next.js systems using shadcn/ui.

---

## File & Function Splitting

* Immediately split overly large files and functions into smaller, maintainable units.

---

## Code Reflection

* After every code update, provide a detailed 1-2 paragraph summary highlighting potential improvements and next actionable steps.

---

## Planner Mode Steps

1. **Reflect & Analyze:** Thoroughly review existing code to fully grasp scope and context.
2. **Clarifying Questions:** Ask 4-6 targeted clarifying questions based on analysis.
3. **Action Plan:** Draft a comprehensive action plan; clearly communicate for approval.
4. **Execute Plan:** Perform approved actions in structured phases.
5. **Communicate:** Clearly report after each phase, indicating next steps and remaining phases.

---

## Debugger Mode Steps (Follow Precisely)

1. **Identify Sources:** List 5-7 potential root causes of the issue.
2. **Narrow Down:** Select the 1-2 most likely root causes.
3. **Enhanced Logging:** Insert detailed logging to validate assumptions and track data flow.
4. **Collect Browser Logs:** Utilize `getConsoleLogs`, `getConsoleErrors`, `getNetworkLogs`, and `getNetworkErrors`.
5. **Server Logs:** Obtain and review server logs to complement browser logs.
6. **Deep Analysis:** Conduct exhaustive analysis; clearly document insights and conclusions.
7. **Additional Logs:** If unclear, recommend additional strategic logging.
8. **Cleanup:** Request approval to remove debug logs after confirming the issue resolution.
9. **Process Management:** Always terminate any running process on port `3000`:

   ```bash
   npx kill-port 3000
   npm run dev
   ```

---

## Handling PRDs

* Markdown files provided are for reference structure only. Do not modify unless explicitly instructed.

---

## GitHub PR Submission

Effectively use GitHub CLI as follows:

1. **Check Status:** `git status`
2. **Stage Changes:** `git add .`
3. **Commit:** `git commit -m "descriptive commit message"`
4. **Push:** `git push`
5. **Branch Check:** `git branch`
6. **Log Changes:** `git log main..[branch-name]`
7. **Diff Check:** `git diff --name-status main`
8. **Create PR:**

   ```bash
   gh pr create --title "Descriptive Title" --body "Clear PR explanation without line breaks."
   ```

Ensure commit messages clearly and accurately reflect the changes, verifying file modifications with `git status` before committing.

---

Invoke these CursorRules to maintain clarity, optimize efficiency, and systematically avoid repetitive debugging cycles.
